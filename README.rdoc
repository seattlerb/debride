= debride

home :: https://github.com/seattlerb/debride
rdoc :: http://docs.seattlerb.org/debride

== DESCRIPTION:

Analyze code for potentially uncalled / dead methods, now with auto-removal.

== FEATURES/PROBLEMS:

* Static analysis of code. Can be easily hooked up to a CI.
* As with all static analysis tools of dynamic languages, can't be 100%.
* Whitelisting known good methods by name or regexp.
* Use --rails for Rails-specific domain knowledge.
* Use debride_rm to brazenly remove all unused methods. BE CAREFUL.
* Use `debride_rails_whitelist` to generate an emperical whitelist from logs.
* Uses path_expander, so you can use:
  * dir_arg -- expand a directory automatically
  * @file_of_args -- persist arguments in a file
  * -path_to_subtract -- ignore intersecting subsets of files/directories

== SYNOPSIS:

  % debride lib

  These methods MIGHT not be called:

  MyClass
    good_method                         lib/some/file.rb:16
    bad_method                          lib/some/file.rb:20
  ...

But you know that good_method is called (perhaps because it is public
API), then you can whitelist it:

  % echo good_method > whitelist.txt
  % debride --whitelist whitelist.txt lib

  These methods MIGHT not be called:

  MyClass
    bad_method                          lib/some/file.rb:20
  ...
  
Usage example for a typical rails application:
  # dump rake routes into a file
  % rake routes > routes.txt
  # generate whitelist based on routes and usages from production log
  % debride_rails_whitelist routes.txt log/production.log | sort -u > whitelist.txt
  # add migration methods
  % echo up >> whitelist.txt
  % echo down >> whitelist.txt
  % echo change >> whitelist.txt
  # output debride report co standard output with the following options:
  # ignore typical rails methods, 
  # specify generated whitelist,
  # run in current directory (".")
  % debride --rails --whitelist whitelist.txt .

You can also use regexps in your whitelist by delimiting them with //'s.

== PLUGINS:

debride-erb  :: Extends debride to analyze erb files (via erubis ala rails).
debride-haml :: Plugin to allow debride to parse Haml files.
debride-curly :: A plugin for the Curly templating language
debride-slim :: Extends debride to analyze Slim files

== EDITOR INTEGRATION:

TextMate 2 :: * {Debride-Rails.tmbundle}[https://github.com/jjuliano/Debride-Rails.tmbundle] - Debride with Rails support 
              * {Debride.tmbundle}[https://github.com/jjuliano/Debride-Rails.tmbundle] - Debride for Ruby

== REQUIREMENTS:

* sexp_processor
* ruby_parser
* path_expander

== INSTALL:

* sudo gem install debride

== CONTRIBUTING:

* sudo gem install minitest
* ruby -Ilib:test test/test_debride.rb

== LICENSE:

(The MIT License)

Copyright (c) Ryan Davis, seattle.rb

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
'Software'), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
